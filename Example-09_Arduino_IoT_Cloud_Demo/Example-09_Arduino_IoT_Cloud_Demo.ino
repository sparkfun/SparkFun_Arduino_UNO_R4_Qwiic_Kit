#include "arduino_secrets.h"

/*
  Arduino IoT Cloud Demo - BME280/VEML6030/BMA400
  SparkFun Electronics
  Date: 2023/06/22
  License: MIT.

  This example demonstrates basic sensor capture and transmission to the Arduino IoT Cloud.

  NOTE: This example uses more than the 5 variables allowed in the free tier of Arduino IoT Cloud. 
        While not required, the dashboard used with this example also makes use of the Advanced 
        Chart Widget, a premium feature.
  
  Feel like supporting open source hardware?
  Buy a board from SparkFun!
  `--- SparkFun Arduino Uno R4 WiFi Qwiic Kit (https://www.sparkfun.com/products/22641)

  Hardware Connections:
  Plug the BME280, VEML6030 and BMA400 qwiic boards into the Arduino R4 Wifi via the Qwiic connector.
*/

/* 
  Sketch generated by the Arduino IoT Cloud Thing "ESP32-TPC-IoT-Demo"
  https://create.arduino.cc/cloud/things/80a8f6b1-80f1-4f12-83fd-9c6798860df2 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudAcceleration accelX;
  CloudAcceleration accelY;
  CloudAcceleration accelZ;
  CloudTemperatureSensor tempC;
  CloudIlluminance luxVal;
  CloudRelativeHumidity humidityRH;
  CloudPressure pressurePa;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <SparkFunBME280.h>
#include <SparkFun_VEML6030_Ambient_Light_Sensor.h>
#include <SparkFun_BMA400_Arduino_Library.h>

#define AL_ADDR 0x48

BME280 myBME280Sensor;
BMA400 myBMA400Sensor;
SparkFun_Ambient_Light myLightSensor(AL_ADDR);

// BME280 initialization
BME280_SensorMeasurements myBME280Measures;

// BMA400 initialization
uint8_t bma400I2CAddress = BMA400_I2C_ADDRESS_DEFAULT; // 0x14

// Ambient Light Sensor initialization
float gain = 0.125;
int8_t integTime = 100;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  Wire.begin();
  
  // BME280 Begin
  if (!myBME280Sensor.beginI2C())
  {
    Serial.println(F("The BME280 did not respond. Please check wiring. Spinning..."));
    while(1);
  }
  
  // BMA400 Begin
  if (myBMA400Sensor.beginI2C(bma400I2CAddress) != BMA400_OK)
  {
    Serial.println(F("The BMA400 did not respond. Please check wiring. Spinning..."));
    while(1);
  }
  
  // Ambient Light Sensor Begin
  if (!myLightSensor.begin())
  {
    Serial.println(F("The Ambient Light Sensor did not respond. Please check wiring. Spinning..."));
    while(1);
  }
  
  myLightSensor.setGain(gain);
  myLightSensor.setIntegTime(integTime);
  
  Serial.println(F("Reading settings from ambient light sensor..."));
  Serial.print(F("Gain: "));
  Serial.print(myLightSensor.readGain(), 3);
  Serial.print(F(" Integration Time: "));
  Serial.println(myLightSensor.readIntegTime());
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  // BME280 Update
  myBME280Sensor.readAllMeasurements(&myBME280Measures);
  tempC = myBME280Measures.temperature;
  humidityRH = myBME280Measures.humidity;
  pressurePa = myBME280Measures.pressure;
  
  // BMA400 Update
  myBMA400Sensor.getSensorData();
  accelX = myBMA400Sensor.data.accelX;
  accelY = myBMA400Sensor.data.accelY;
  accelZ = myBMA400Sensor.data.accelZ;
  
  // Ambient Light Update
  luxVal = myLightSensor.readLight();
  
}
